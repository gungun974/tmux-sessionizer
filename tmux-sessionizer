#!/usr/bin/env bash
switch_to() {
    if [[ -z $TMUX ]]; then
        tmux attach-session -t $1
    else
        tmux switch-client -t $1
    fi
}

has_session() {
    tmux list-sessions | grep -q "^$1:"
}

hydrate() {
    if [ -f $2/.tmux-sessionizer ]; then
        tmux send-keys -t $1 "source $2/.tmux-sessionizer" c-M
    elif [ -f $HOME/.tmux-sessionizer ]; then
        tmux send-keys -t $1 "source $HOME/.tmux-sessionizer" c-M
    fi
}

readonly ROOTS=("$HOME" "$HOME/personal" "$HOME/personal/dev/env/.config")

# Search Roots projects directories

DIRECTORIES=("${ROOTS[@]}")

function search_roots_directories_scan {
    for item in "$1"/*; do
        if [ -d "$item" ]; then
            if [ -f "$item/.tmux-scan" ]; then
                DIRECTORIES+=($item)
 
                search_roots_directories_scan "$item"
            fi
        fi
    done
}

if [[ $# -eq 1 ]]; then
    selected=$1
else
    for ROOT in "${ROOTS[@]}"; do
      search_roots_directories_scan "$ROOT"
    done

    exclude_folder=""

    # Remove .tmux-scan directories
    for directory in "${DIRECTORIES[@]}"; do
        exclude_folder+="($directory$)|"
    done

    # Remove .tmux-exclude directories
    for directory in "${DIRECTORIES[@]}"; do
      for item in "$directory"/*; do
          if [ -d "$item" ]; then
              if [ -f "$item/.tmux-exclude" ]; then
                exclude_folder+="($item$)|"
              fi
          fi
      done
    done

    exclude_folder=${exclude_folder%"|"}

    # Show FZF
    selected=$(find "${DIRECTORIES[@]}" -mindepth 1 -maxdepth 1 -type d | rg -v "${exclude_folder}" | fzf)
fi

if [[ -z $selected ]]; then
    exit 0
fi

selected_name=$(basename "$selected" | tr . _)
tmux_running=$(pgrep tmux)

if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    tmux new-session -s $selected_name -c $selected
    hydrate $selected_name $selected
    exit 0
fi

if ! has_session $selected_name; then
    tmux new-session -ds $selected_name -c $selected
    hydrate $selected_name $selected
fi

switch_to $selected_name
